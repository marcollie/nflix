{"version":3,"sources":["assets/noPosterSmall.png","assets/imdbLogo.svg","Components/Section.js","Components/Loader.js","Components/Message.js","Components/Poster.js","Routes/Home/HomePresenter.js","api.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Components/Header.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Components/Router.js","Components/GlobalStyles.js","Components/App.js","index.js"],"names":["module","exports","Container","styled","div","Title","span","Grid","Section","title","children","role","aria-label","Text","props","color","Message","text","Image","bgUrl","Rating","ImageContainer","Year","Poster","id","imageUrl","rating","year","isMovie","to","require","length","substring","HomePresenter","nowPlaying","popular","upcoming","loading","error","Loader","map","movie","key","poster_path","original_title","vote_average","release_date","api","axios","create","baseURL","params","api_key","language","moviesApi","get","movieDetail","append_to_response","search","term","query","encodeURIComponent","tvApi","topRated","airingToday","showDetail","HomeContainer","state","data","results","console","log","this","setState","React","Component","TVPresenter","show","original_name","first_air_date","TVContainer","Header","header","List","ul","Item","li","current","SLink","Link","withRouter","pathname","location","Form","form","Input","input","SearchPresenter","movieResults","tvResults","searchTerm","handleSubmit","updateTerm","onSubmit","placeholder","value","onChange","SearchContainer","event","preventDefault","searchByTerm","target","a","Backdrop","bgImage","Content","Cover","Data","h1","ItemContainer","Divider","Imdb","Overview","p","Company","DetailPresenter","result","backdrop_path","runtime","episode_run_time","genres","genre","index","name","imdb_id","onClick","overview","DetailContainer","includes","match","push","history","parseId","parseInt","isNaN","path","exact","component","Home","TV","Search","Detail","from","globalStyles","createGlobalStyle","reset","App","Router","GlobalStyles","ReactDOM","render","document","getElementById"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,2C,uDCA3CD,EAAOC,QAAU,IAA0B,sC,yoBCI3C,IAAMC,EAAYC,UAAOC,IAAV,KAMTC,EAAQF,UAAOG,KAAV,KAMLC,EAAOJ,UAAOC,IAAV,KAsBKI,EAfC,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAT,OACZ,kBAACR,EAAD,KACI,kBAACG,EAAD,KAAQI,GACR,kBAACF,EAAD,KAAOG,K,6MCvBf,IAAMR,EAAYC,UAAOC,IAAV,KASA,oBACX,kBAAC,EAAD,KACI,0BAAMO,KAAK,MAAMC,aAAW,WAA5B,Y,oOCVR,IAAMV,EAAYC,UAAOC,IAAV,KAMTS,EAAOV,UAAOG,KAAV,KACG,SAAAQ,GAAK,OAAIA,EAAMC,SAcbC,EAXC,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMF,EAAT,EAASA,MAAT,OACZ,kBAAC,EAAD,KACI,kBAACF,EAAD,CAAME,MAAOA,GAAQE,K,0/BCX7B,IAAMf,EAAYC,UAAOC,IAAV,KAKTc,EAAQf,UAAOC,IAAV,KACiB,SAAAU,GAAK,OAAIA,EAAMK,SAQrCC,EAASjB,UAAOG,KAAV,KAONe,EAAiBlB,UAAOC,IAAV,IAIVc,EAGAE,GAOJf,EAAQF,UAAOG,KAAV,KAMLgB,EAAOnB,UAAOG,KAAV,KAgCKiB,EA3BA,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,SAAUhB,EAAjB,EAAiBA,MAAOiB,EAAxB,EAAwBA,OAAQC,EAAhC,EAAgCA,KAAhC,IAAsCC,eAAtC,gBACX,kBAAC,IAAD,CAAMC,GAAID,EAAO,iBAAaJ,GAAb,gBAA6BA,IAC1C,kBAAC,EAAD,KACI,kBAACH,EAAD,KACI,kBAACH,EAAD,CAAOC,MAAOM,EAAQ,yCAAqCA,GAAaK,EAAQ,MAChF,kBAACV,EAAD,KACI,0BAAMT,KAAK,MAAMC,aAAW,UAA5B,UAEI,IACHc,EAJL,QAOJ,kBAAC,EAAD,KAAQjB,EAAMsB,OAAS,GAAf,UAAuBtB,EAAMuB,UAAU,EAAG,IAA1C,OAAqDvB,GAC7D,kBAACa,EAAD,KAAOK,M,2FCvDnB,IAAMzB,EAAYC,UAAOC,IAAV,KAwEA6B,EApEO,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAYC,EAAf,EAAeA,QAASC,EAAxB,EAAwBA,SAAUC,EAAlC,EAAkCA,QAASC,EAA3C,EAA2CA,MAA3C,OAClB,oCACI,kBAAC,IAAD,KACI,kDAEHD,EACG,kBAACE,EAAD,MAEI,kBAAC,EAAD,KACKL,GAAcA,EAAWH,OAAS,GAC/B,kBAAC,EAAD,CAAStB,MAAM,eACXyB,EAAWM,KAAI,SAAAC,GAAK,OAChB,kBAAC,EAAD,CACIC,IAAKD,EAAMjB,GACXA,GAAIiB,EAAMjB,GACVC,SAAUgB,EAAME,YAChBlC,MAAOgC,EAAMG,eACblB,OAAQe,EAAMI,aACdlB,KAAMc,EAAMK,cAAgBL,EAAMK,aAAad,UAAU,EAAG,GAC5DJ,SAAS,QAKxBQ,GAAYA,EAASL,OAAS,GAC3B,kBAAC,EAAD,CAAStB,MAAM,mBACX2B,EAASI,KAAI,SAAAC,GAAK,OACd,kBAAC,EAAD,CACIC,IAAKD,EAAMjB,GACXA,GAAIiB,EAAMjB,GACVC,SAAUgB,EAAME,YAChBlC,MAAOgC,EAAMG,eACblB,OAAQe,EAAMI,aACdlB,KAAMc,EAAMK,cAAgBL,EAAMK,aAAad,UAAU,EAAG,GAC5DJ,SAAS,QAKxBO,GAAWA,EAAQJ,OAAS,GACzB,kBAAC,EAAD,CAAStB,MAAM,kBACX0B,EAAQK,KAAI,SAAAC,GAAK,OACb,kBAAC,EAAD,CACIC,IAAKD,EAAMjB,GACXA,GAAIiB,EAAMjB,GACVC,SAAUgB,EAAME,YAChBlC,MAAOgC,EAAMG,eACblB,OAAQe,EAAMI,aACdlB,KAAMc,EAAMK,cAAgBL,EAAMK,aAAad,UAAU,EAAG,GAC5DJ,SAAS,QAKxBU,GAAS,kBAAC,EAAD,CAASvB,MAAM,UAAUE,KAAMqB,O,QCjEvDS,E,OAAMC,EAAMC,OAAO,CACrBC,QAAS,gCACTC,OAAQ,CACJC,QAAS,mCACTC,SAAU,WAILC,GAAY,CACrBpB,WAAY,kBAAMa,EAAIQ,IAAI,sBAC1BnB,SAAU,kBAAMW,EAAIQ,IAAI,mBACxBpB,QAAS,kBAAMY,EAAIQ,IAAI,kBACvBC,YAAa,SAAAhC,GAAE,OACXuB,EAAIQ,IAAJ,gBAAiB/B,GAAO,CACpB2B,OAAQ,CACJM,mBAAoB,aAGhCC,OAAQ,SAACC,GAAD,OACPZ,EAAIQ,IAAI,eAAgB,CACrBJ,OAAQ,CACJS,MAAOC,mBAAmBF,QAKzBG,GAAQ,CACjBC,SAAU,kBAAMhB,EAAIQ,IAAI,iBACxBpB,QAAS,kBAAMY,EAAIQ,IAAI,eACvBS,YAAa,kBAAMjB,EAAIQ,IAAI,oBAC3BU,WAAY,SAAAzC,GAAE,OACVuB,EAAIQ,IAAJ,aAAc/B,GAAO,CACjB2B,OAAQ,CACJM,mBAAoB,aAGhCC,OAAQ,SAACC,GAAD,OACPZ,EAAIQ,IAAI,YAAa,CAClBJ,OAAQ,CACJS,MAAOC,mBAAmBF,QCvCvBO,G,2MCGXC,MAAQ,CACJjC,WAAY,KACZE,SAAU,KACVD,QAAS,KACTG,MAAO,KACPD,SAAS,G,sOAOKiB,GAAUpB,a,uBADCA,E,EAAjBkC,KAAQC,QAEZC,QAAQC,IAAIrC,G,SAIFoB,GAAUlB,W,uBADCA,E,EAAjBgC,KAAQC,Q,UAKFf,GAAUnB,U,iBADCA,E,EAAjBiC,KAAQC,QAGZG,KAAKC,SAAS,CACVvC,aACAE,WACAD,Y,kDAGJqC,KAAKC,SAAS,CACVnC,MAAO,mC,yBAGXkC,KAAKC,SAAS,CACVpC,SAAQ,I,kKAKV,IAAD,EACqDmC,KAAKL,MAAvDjC,EADH,EACGA,WAAYE,EADf,EACeA,SAAUD,EADzB,EACyBA,QAASG,EADlC,EACkCA,MAAOD,EADzC,EACyCA,QAE9C,OADAiC,QAAQC,IAAIC,KAAKL,OAEb,kBAAC,EAAD,CACIjC,WAAYA,EACZE,SAAUA,EACVD,QAASA,EACTG,MAAOA,EACPD,QAASA,Q,GAjDIqC,IAAMC,W,6FCKnC,IAAMzE,GAAYC,UAAOC,IAAV,MAmEAwE,GA/DK,SAAC,GAAD,IAAGb,EAAH,EAAGA,SAAU5B,EAAb,EAAaA,QAAS6B,EAAtB,EAAsBA,YAAa3B,EAAnC,EAAmCA,QAASC,EAA5C,EAA4CA,MAA5C,OAChB,oCACI,kBAAC,IAAD,KAAQ,oDACPD,EACD,kBAACE,EAAD,MAEI,kBAAC,GAAD,KACKwB,GAAYA,EAAShC,OAAS,GAC3B,kBAAC,EAAD,CAAStB,MAAM,mBACVsD,EAASvB,KAAI,SAAAqC,GAAI,OACd,kBAAC,EAAD,CACInC,IAAKmC,EAAKrD,GACVA,GAAIqD,EAAKrD,GACTC,SAAUoD,EAAKlC,YACflC,MAAOoE,EAAKC,cACZpD,OAAQmD,EAAKhC,aACblB,KAAMkD,EAAKE,eAAe/C,UAAU,EAAG,SAKtDG,GAAWA,EAAQJ,OAAS,GACzB,kBAAC,EAAD,CAAStB,MAAM,iBACV0B,EAAQK,KAAI,SAAAqC,GAAI,OACb,kBAAC,EAAD,CACInC,IAAKmC,EAAKrD,GACVA,GAAIqD,EAAKrD,GACTC,SAAUoD,EAAKlC,YACflC,MAAOoE,EAAKC,cACZpD,OAAQmD,EAAKhC,aACblB,KAAMkD,EAAKE,eAAe/C,UAAU,EAAG,SAKtDgC,GAAeA,EAAYjC,OAAS,GACjC,kBAAC,EAAD,CAAStB,MAAM,gBACVuD,EAAYxB,KAAI,SAAAqC,GAAI,OACjB,kBAAC,EAAD,CACInC,IAAKmC,EAAKrD,GACVA,GAAIqD,EAAKrD,GACTC,SAAUoD,EAAKlC,YACflC,MAAOoE,EAAKC,cACZpD,OAAQmD,EAAKhC,aACblB,KAAMkD,EAAKE,eAAe/C,UAAU,EAAG,SAKtDM,GAAS,kBAAC,EAAD,CAASvB,MAAM,UAAUE,KAAMqB,OC5D1C0C,G,2MCGXb,MAAQ,CACJJ,SAAU,KACV5B,QAAS,KACT6B,YAAa,KACb3B,SAAS,EACTC,MAAO,M,sOAKuCwB,GAAMC,W,uBAAzBA,E,EAAhBK,KAAOC,Q,SAC2BP,GAAM3B,U,uBAAxBA,E,EAAhBiC,KAAOC,Q,UAC+BP,GAAME,c,iBAA5BA,E,EAAhBI,KAAOC,QACdG,KAAKC,SAAS,CAAEV,WAAU5B,UAAS6B,gB,kDAEnCQ,KAAKC,SAAS,CACVnC,MAAO,8B,yBAGXkC,KAAKC,SAAS,CAAEpC,SAAS,I,kKAIvB,IAAD,EACsDmC,KAAKL,MAAxDJ,EADH,EACGA,SAAU5B,EADb,EACaA,QAAS6B,EADtB,EACsBA,YAAa3B,EADnC,EACmCA,QAASC,EAD5C,EAC4CA,MAEjD,OADAgC,QAAQC,IAAIC,KAAKL,OAEb,kBAAC,GAAD,CACIJ,SAAUA,EACV5B,QAASA,EACT6B,YAAaA,EACb3B,QAASA,EACTC,MAAOA,Q,GAjCMoC,IAAMC,W,o0BCAnC,IAAMM,GAAS9E,UAAO+E,OAAV,MAcNC,GAAOhF,UAAOiF,GAAV,MAIJC,GAAOlF,UAAOmF,GAAV,MAKA,SAAAxE,GAAK,OAAIA,EAAMyE,QAAU,UAAY,iBAIzCC,GAAQrF,kBAAOsF,IAAPtF,CAAH,MAOIuF,gBAAW,gBAAeC,EAAf,EAAGC,SAAYD,SAAf,OACtB,kBAACV,GAAD,KACI,kBAACE,GAAD,KACI,kBAACE,GAAD,CAAME,QAAsB,MAAbI,GACX,kBAACH,GAAD,CAAO3D,GAAG,KAAV,WAEJ,kBAACwD,GAAD,CAAME,QAAsB,QAAbI,GACX,kBAACH,GAAD,CAAO3D,GAAG,OAAV,OAEJ,kBAACwD,GAAD,CAAME,QAAsB,YAAbI,GACX,kBAACH,GAAD,CAAO3D,GAAG,WAAV,gB,sVCvChB,IAAM3B,GAAYC,UAAOC,IAAV,MAITyF,GAAO1F,UAAO2F,KAAV,MAKJC,GAAQ5F,UAAO6F,MAAV,MA2EIC,GArES,SAAC,GAAD,IACpBC,EADoB,EACpBA,aACAC,EAFoB,EAEpBA,UACA9D,EAHoB,EAGpBA,QACAC,EAJoB,EAIpBA,MACA8D,EALoB,EAKpBA,WACAC,EANoB,EAMpBA,aACAC,EAPoB,EAOpBA,WAPoB,OAShB,kBAAC,GAAD,KACI,kBAAC,IAAD,KAAQ,kDACR,kBAACT,GAAD,CAAMU,SAAUF,GACZ,kBAACN,GAAD,CACIS,YAAY,+BACZC,MAAOL,EACPM,SAAUJ,KAGjBjE,EAAU,kBAACE,EAAD,MACP,oCACK2D,GAAgBA,EAAanE,OAAS,GACnC,kBAAC,EAAD,CAAStB,MAAM,iBACVyF,EAAa1D,KAAI,SAAAC,GAAK,OACnB,kBAAC,EAAD,CACIC,IAAKD,EAAMjB,GACXA,GAAIiB,EAAMjB,GACVC,SAAUgB,EAAME,YAChBlC,MAAOgC,EAAMG,eACblB,OAAQe,EAAMI,aACdlB,KAAMc,EAAMK,cAAgBL,EAAMK,aAAad,UAAU,EAAG,GAC5DJ,SAAS,QAKxBuE,GAAaA,EAAUpE,OAAS,GAC7B,kBAAC,EAAD,CAAStB,MAAM,mBACV0F,EAAU3D,KAAI,SAAAqC,GAAI,OACf,kBAAC,EAAD,CACInC,IAAKmC,EAAKrD,GACVA,GAAIqD,EAAKrD,GACTC,SAAUoD,EAAKlC,YACflC,MAAOoE,EAAKC,cACZpD,OAAQmD,EAAKhC,aACblB,KAAMkD,EAAKE,eAAe/C,UAAU,EAAG,UAM9DM,GAAS,kBAAC,EAAD,CAASvB,MAAM,UAAUE,KAAMqB,IACxC6D,GACGD,GACqB,IAArBC,EAAUpE,QACc,IAAxBmE,EAAanE,QACT,kBAAC,EAAD,CAASd,KAAM,gBAAiBF,MAAM,cC7E3C4F,G,2MCIXxC,MAAQ,CACJ+B,aAAc,KACdC,UAAW,KACXC,WAAY,GACZ/D,SAAS,EACTC,MAAO,M,EAGX+D,aAAe,SAACO,GACZA,EAAMC,iBAEY,KADK,EAAK1C,MAApBiC,YAEJ,EAAKU,gB,EAIbR,WAAa,SAACM,GAAW,IACHH,EAAYG,EAAtBG,OAAUN,MAClB,EAAKhC,SAAS,CACV2B,WAAYK,K,EAIpBK,a,sBAAe,oCAAAE,EAAA,6DACHZ,EAAe,EAAKjC,MAApBiC,WACR,EAAK3B,SAAS,CAAEpC,SAAS,IAFd,kBAMGiB,GAAUI,OAAO0C,GANpB,uBAKcF,EALd,EAKH9B,KAAQC,QALL,SASGP,GAAMJ,OAAO0C,GAThB,gBAQcD,EARd,EAQH/B,KAAQC,QAEZ,EAAKI,SAAS,CACVyB,eACAC,cAZG,kDAgBP,EAAK1B,SAAS,CAAEnC,MAAO,wBAhBhB,yBAkBP,EAAKmC,SAAS,CAAEpC,SAAS,IAlBlB,6E,wEAsBL,IAAD,EAC2DmC,KAAKL,MAA7D+B,EADH,EACGA,aAAcC,EADjB,EACiBA,UAAWC,EAD5B,EAC4BA,WAAY/D,EADxC,EACwCA,QAASC,EADjD,EACiDA,MAEtD,OADAgC,QAAQC,IAAIC,KAAKL,OAEb,kBAAC,GAAD,CACI+B,aAAcA,EACdC,UAAWA,EACXC,WAAYA,EACZ/D,QAASA,EACTC,MAAOA,EACP+D,aAAc7B,KAAK6B,aACnBC,WAAY9B,KAAK8B,iB,GAzDJ5B,IAAMC,W,y8DCCnC,IAAMzE,GAAYC,UAAOC,IAAV,MAOT6G,GAAW9G,UAAOC,IAAV,MAMc,SAAAU,GAAK,OAAIA,EAAMoG,WAQrCC,GAAUhH,UAAOC,IAAV,MAQPgH,GAAQjH,UAAOC,IAAV,MAEiB,SAAAU,GAAK,OAAIA,EAAMoG,WAOrCG,GAAOlH,UAAOC,IAAV,MAMJC,GAAQF,UAAOmH,GAAV,MAKLC,GAAgBpH,UAAOC,IAAV,MAIbiF,GAAOlF,UAAOG,KAAV,MAIJkH,GAAUrH,UAAOG,KAAV,MAIPmH,GAAOtH,UAAOG,KAAV,MAIkB,SAAAQ,GAAK,OAAIA,EAAMoG,WAIrCQ,GAAWvH,UAAOwH,EAAV,MAQRC,GAAUzH,UAAOC,IAAV,MAoEEyH,GA5DS,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQzF,EAAX,EAAWA,QAAX,EAAoBC,MAApB,OACpBD,EACI,oCACI,kBAAC,IAAD,KACI,mDAER,kBAACE,EAAD,OAGI,kBAAC,GAAD,KACI,kBAAC,IAAD,KACA,+BACKuF,EAAOlF,eAAiBkF,EAAOlF,eAAiBkF,EAAOhD,cAD5D,aAIA,kBAACmC,GAAD,CAAUC,QAAO,6CAAwCY,EAAOC,iBAChE,kBAACZ,GAAD,KACI,kBAACC,GAAD,CAAOF,QAASY,EAAOnF,YAAP,6CAA2DmF,EAAOnF,aAAgBb,EAAQ,MAC1G,kBAACuF,GAAD,KACA,kBAAC,GAAD,KACKS,EAAOlF,eAAiBkF,EAAOlF,eAAiBkF,EAAOhD,eAE5D,kBAACyC,GAAD,KACI,kBAAC,GAAD,KAAOO,EAAOhF,aACRgF,EAAOhF,aAAad,UAAU,EAAG,GACjC8F,EAAO/C,eAAe/C,UAAU,EAAG,IAEzC,kBAACwF,GAAD,eACA,kBAAC,GAAD,KAAOM,EAAOE,QACRF,EAAOE,QACPF,EAAOG,iBAAiB,GAF9B,QAIA,kBAACT,GAAD,eACA,kBAAC,GAAD,KACKM,EAAOI,QACRJ,EAAOI,OAAO1F,KAAI,SAAC2F,EAAOC,GAAR,OACdA,IAAUN,EAAOI,OAAOnG,OAAQ,EAC9BoG,EAAME,KADR,UAEKF,EAAME,KAFX,WAKR,kBAACb,GAAD,eACA,kBAAC,GAAD,KACI,kBAACC,GAAD,CAAMP,QAASY,EAAOQ,QAAP,4GAA+HxG,EAAQ,IAA8ByG,QAAQ,iCAGpM,kBAACb,GAAD,KAAWI,EAAOU,UAClB,kBAACZ,GAAD,UCxILa,G,YCGX,WAAY3H,GAAQ,IAAD,sBACf,4CAAMA,IADS,IAGC6E,EACZ7E,EADA8E,SAAYD,SAHD,OAKf,EAAKxB,MAAQ,CACT2D,OAAQ,KACRxF,MAAO,KACPD,SAAS,EACTT,QAAS+D,EAAS+C,SAAS,YAThB,E,oNAmBXlE,KAAK1D,MAHSU,E,EADdmH,MACIxF,OAAU3B,GAEHoH,E,EAAXC,QAAWD,KAEPhH,EAAY4C,KAAKL,MAAjBvC,QACFkH,EAAUC,SAASvH,IACrBwH,MAAMF,G,yCACCF,EAAK,M,oBAIThH,E,iCAC0B0B,GAAUE,YAAYsF,G,gBAAtChB,E,EAAP1D,K,yCAEsBN,GAAMG,WAAW6E,G,iBAAjChB,E,EAAN1D,K,0DAGNI,KAAKC,SAAS,CAAEnC,MAAO,yB,yBAEvBkC,KAAKC,SAAS,CAAEpC,SAAS,EAAOyF,W,kKAI9B,IAAD,EAC8BtD,KAAKL,MAAhC2D,EADH,EACGA,OAAQxF,EADX,EACWA,MAAOD,EADlB,EACkBA,QAEvB,OADAiC,QAAQC,IAAIuD,GAER,kBAAC,GAAD,CACIA,OAAQA,EACRxF,MAAOA,EACPD,QAASA,Q,GA/CIqC,IAAMC,WCIpB,qBACX,kBAAC,IAAD,KACI,oCACI,kBAAC,GAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOsE,KAAK,IAAIC,OAAK,EAACC,UAAaC,KACnC,kBAAC,IAAD,CAAOH,KAAK,MAAMC,OAAK,EAACC,UAAaE,KACrC,kBAAC,IAAD,CAAOJ,KAAK,UAAUC,OAAK,EAACC,UAAaG,KACzC,kBAAC,IAAD,CAAOL,KAAK,aAAaE,UAAWI,KACpC,kBAAC,IAAD,CAAON,KAAK,YAAYE,UAAWI,KACnC,kBAAC,IAAD,CAAUC,KAAK,IAAI3H,GAAG,U,ugBCftC,IAoBe4H,GApBMC,4BAAH,KACZC,MCWSC,G,iLATX,OACE,oCACE,kBAACC,GAAD,MACA,kBAACC,GAAD,W,GALUnF,aCClBoF,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.b9f4b4f9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/noPosterSmall.87a0eb6a.png\";","module.exports = __webpack_public_path__ + \"static/media/imdbLogo.ed2fcc33.svg\";","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    :not(:last-child) {\r\n        margin-bottom: 50px;\r\n    }\r\n`;\r\n\r\nconst Title = styled.span`\r\n    font-size: 14px;\r\n    font-weight: 600;\r\n    margin-bottom: 25px;\r\n`;\r\n\r\nconst Grid = styled.div`\r\n    margin-top: 25px;\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fill, 125px);\r\n    grid-gap: 25px;\r\n`;\r\n\r\nconst Section = ({title, children}) => (\r\n    <Container>\r\n        <Title>{title}</Title>\r\n        <Grid>{children}</Grid>\r\n    </Container>\r\n);\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.oneOfType([\r\n        PropTypes.arrayOf(PropTypes.node),\r\n        PropTypes.node\r\n    ])\r\n}\r\n\r\nexport default Section;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    height: 100vh;\r\n    width: 100vw;\r\n    display: flex;\r\n    justify-content: center;\r\n    font-size: 25px;\r\n    margin-top: 20px;\r\n`;\r\n\r\nexport default () => (\r\n    <Container>\r\n        <span role=\"img\" aria-label=\"Loading\">\r\n            ⏳\r\n        </span>\r\n    </Container>\r\n)","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    width: 100vw;\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\n\r\nconst Text = styled.span`\r\n    color: ${props => props.color};\r\n`;\r\n\r\nconst Message = ({ text, color }) => (\r\n    <Container>\r\n        <Text color={color}>{text}</Text>\r\n    </Container>\r\n); \r\n\r\nMessage.propTypes = {\r\n    text: PropTypes.string.isRequired,\r\n    color: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Message;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    font-size: 12px;\r\n`;\r\n\r\n\r\nconst Image = styled.div`\r\n    background-image: url(${props => props.bgUrl});\r\n    height: 180px;\r\n    background-size: cover;\r\n    border-radius: 4px;\r\n    background-position: center center;\r\n    transition: opacity 0.1s linear;\r\n`;\r\n\r\nconst Rating = styled.span`\r\n    bottom: 5px;\r\n    right: 5px;\r\n    position: absolute;\r\n    opacity: 0;\r\n`;\r\n\r\nconst ImageContainer = styled.div`\r\n    margin-bottom: 5px;\r\n    position: relative;\r\n    &:hover {\r\n        ${Image} {\r\n            opacity: 0.3;\r\n        }\r\n        ${Rating} {\r\n            opacity: 1;   \r\n        }\r\n    }\r\n`;\r\n\r\n\r\nconst Title = styled.span`\r\n    display: block;\r\n    font-size: 12px;\r\n    margin-bottom: 3px;\r\n`;\r\n\r\nconst Year = styled.span`\r\n    font-size: 10px;\r\n    color: rgba(255, 255, 255, 0.5);\r\n`;\r\n\r\nconst Poster = ({ id, imageUrl, title, rating, year, isMovie = false }) => (\r\n    <Link to={isMovie ? `/movie/${id}` : `/show/${id}`}>\r\n        <Container>\r\n            <ImageContainer>\r\n                <Image bgUrl={imageUrl ? `https://image.tmdb.org/t/p/w300${imageUrl}` : require(\"../assets/noPosterSmall.png\")} />\r\n                <Rating>\r\n                    <span role=\"img\" aria-label=\"rating\">\r\n                        ⭐\r\n                </span>{\" \"}\r\n                    {rating}/10\r\n            </Rating>\r\n            </ImageContainer>\r\n            <Title>{title.length > 15 ? `${title.substring(0, 15)}...` : title}</Title>\r\n            <Year>{year}</Year>\r\n        </Container>\r\n    </Link>\r\n)\r\n\r\nPoster.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    imageUrl: PropTypes.string,\r\n    title: PropTypes.string.isRequired,\r\n    rating: PropTypes.number,\r\n    yeat: PropTypes.string,\r\n    isMovie: PropTypes.bool\r\n}\r\n\r\nexport default Poster;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Section from \"Components/Section\";\r\nimport Loader from \"Components/Loader\";\r\nimport Message from \"Components/Message\";\r\nimport Poster from \"../../Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n    padding: 20px;\r\n`;\r\n\r\nconst HomePresenter = ({ nowPlaying, popular, upcoming, loading, error }) => (\r\n    <>\r\n        <Helmet>\r\n            <title>Movies | Nflix</title>\r\n        </Helmet>\r\n        {loading ? (\r\n            <Loader />\r\n        ) : (\r\n                <Container>\r\n                    {nowPlaying && nowPlaying.length > 0 && (\r\n                        <Section title=\"Now Playing\">{\r\n                            nowPlaying.map(movie => (\r\n                                <Poster\r\n                                    key={movie.id}\r\n                                    id={movie.id}\r\n                                    imageUrl={movie.poster_path}\r\n                                    title={movie.original_title}\r\n                                    rating={movie.vote_average}\r\n                                    year={movie.release_date && movie.release_date.substring(0, 4)}\r\n                                    isMovie={true}\r\n                                />\r\n                            ))}\r\n                        </Section>\r\n                    )}\r\n                    {upcoming && upcoming.length > 0 && (\r\n                        <Section title=\"Upcoming Movies\">{\r\n                            upcoming.map(movie =>\r\n                                <Poster\r\n                                    key={movie.id}\r\n                                    id={movie.id}\r\n                                    imageUrl={movie.poster_path}\r\n                                    title={movie.original_title}\r\n                                    rating={movie.vote_average}\r\n                                    year={movie.release_date && movie.release_date.substring(0, 4)}\r\n                                    isMovie={true}\r\n                                />\r\n                            )}\r\n                        </Section>\r\n                    )}\r\n                    {popular && popular.length > 0 && (\r\n                        <Section title=\"Popular Movies\">{\r\n                            popular.map(movie =>\r\n                                <Poster\r\n                                    key={movie.id}\r\n                                    id={movie.id}\r\n                                    imageUrl={movie.poster_path}\r\n                                    title={movie.original_title}\r\n                                    rating={movie.vote_average}\r\n                                    year={movie.release_date && movie.release_date.substring(0, 4)}\r\n                                    isMovie={true}\r\n                                />\r\n                            )}\r\n                        </Section>\r\n                    )}\r\n                    {error && <Message color=\"#e74c3c\" text={error} />}\r\n                </Container>\r\n            )}\r\n    </>\r\n);\r\n\r\nHomePresenter.propTypes = {\r\n    nowPlaying: PropTypes.array,\r\n    popular: PropTypes.array,\r\n    upcoming: PropTypes.array,\r\n    loading: PropTypes.bool.isRequired,\r\n    error: PropTypes.string\r\n};\r\n\r\nexport default HomePresenter;","import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3/\",\r\n    params: {\r\n        api_key: \"8ce9a1a110e1c4b14ada4645d0c94759\",\r\n        language: \"en-US\"\r\n    }\r\n});\r\n\r\nexport const moviesApi = {\r\n    nowPlaying: () => api.get(\"movie/now_playing\"),\r\n    upcoming: () => api.get(\"movie/upcoming\"),\r\n    popular: () => api.get(\"movie/popular\"),\r\n    movieDetail: id => \r\n        api.get(`movie/${id}` , {\r\n            params: {\r\n                append_to_response: \"videos\"\r\n            }\r\n    }),\r\n    search: (term) =>\r\n     api.get(\"search/movie\", {\r\n        params: {\r\n            query: encodeURIComponent(term)\r\n        }\r\n    })\r\n};\r\n\r\nexport const tvApi = {\r\n    topRated: () => api.get(\"tv/top_rated\"),\r\n    popular: () => api.get(\"tv/popular\"),\r\n    airingToday: () => api.get(\"tv/airing_today\"),\r\n    showDetail: id => \r\n        api.get(`tv/${id}` , {\r\n            params: {\r\n                append_to_response: \"videos\"\r\n            }\r\n    }),\r\n    search: (term) =>\r\n     api.get(\"search/tv\", {\r\n        params: {\r\n            query: encodeURIComponent(term)\r\n        }\r\n    })\r\n};","import HomeContainer from \"./HomeContainer\";\r\n\r\nexport default HomeContainer;","import React from \"react\";\r\nimport HomePresenter from \"./HomePresenter\";\r\nimport { moviesApi } from \"api\";\r\n\r\nexport default class extends React.Component {\r\n    state = {\r\n        nowPlaying: null,\r\n        upcoming: null,\r\n        popular: null,\r\n        error: null,\r\n        loading: true\r\n    };\r\n\r\n    async componentDidMount() {\r\n        try{\r\n            const {\r\n                data: { results: nowPlaying }\r\n            } = await moviesApi.nowPlaying();\r\n            console.log(nowPlaying);\r\n\r\n            const {\r\n                data: { results: upcoming }\r\n            } = await moviesApi.upcoming();\r\n            \r\n            const { \r\n                data: { results: popular }\r\n            } = await moviesApi.popular();\r\n           \r\n            this.setState({\r\n                nowPlaying,\r\n                upcoming,\r\n                popular\r\n            });\r\n        } catch {\r\n            this.setState({\r\n                error: \"Can't find movies information.\"\r\n            });\r\n        } finally {\r\n            this.setState({\r\n                loading:false\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { nowPlaying, upcoming, popular, error, loading } = this.state;\r\n        console.log(this.state);\r\n        return (\r\n            <HomePresenter\r\n                nowPlaying={nowPlaying}\r\n                upcoming={upcoming}\r\n                popular={popular}\r\n                error={error}\r\n                loading={loading}\r\n            />\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Section from \"Components/Section\";\r\nimport Loader from \"Components/Loader\";\r\nimport Message from \"Components/Message\";\r\nimport Poster from \"Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n    padding: 20px;\r\n`;\r\n\r\nconst TVPresenter = ({ topRated, popular, airingToday, loading, error }) =>(\r\n    <>\r\n        <Helmet><title>TV shows | Nfilx</title></Helmet>\r\n        {loading ? (\r\n        <Loader />\r\n    ) : (\r\n            <Container>\r\n                {topRated && topRated.length > 0 && (\r\n                    <Section title=\"Top Rated Shows\">\r\n                        {topRated.map(show =>\r\n                            <Poster\r\n                                key={show.id}\r\n                                id={show.id}\r\n                                imageUrl={show.poster_path}\r\n                                title={show.original_name}\r\n                                rating={show.vote_average}\r\n                                year={show.first_air_date.substring(0, 4)}\r\n                            />\r\n                        )}\r\n                    </Section>\r\n                )}\r\n                {popular && popular.length > 0 && (\r\n                    <Section title=\"Popular Shows\">\r\n                        {popular.map(show =>\r\n                            <Poster\r\n                                key={show.id}\r\n                                id={show.id}\r\n                                imageUrl={show.poster_path}\r\n                                title={show.original_name}\r\n                                rating={show.vote_average}\r\n                                year={show.first_air_date.substring(0, 4)}\r\n                            />\r\n                        )}\r\n                    </Section>\r\n                )}\r\n                {airingToday && airingToday.length > 0 && (\r\n                    <Section title=\"Airing Today\">\r\n                        {airingToday.map(show =>\r\n                            <Poster\r\n                                key={show.id}\r\n                                id={show.id}\r\n                                imageUrl={show.poster_path}\r\n                                title={show.original_name}\r\n                                rating={show.vote_average}\r\n                                year={show.first_air_date.substring(0, 4)}\r\n                            />\r\n                        )}\r\n                    </Section>\r\n                )}\r\n                {error && <Message color=\"#e74c3c\" text={error} />}\r\n            </Container>)}\r\n    </>\r\n)\r\n    \r\n\r\nTVPresenter.propTypes = {\r\n    topRated: PropTypes.array,\r\n    popular: PropTypes.array,\r\n    airingToday: PropTypes.array,\r\n    loading: PropTypes.bool.isRequired,\r\n    error: PropTypes.string\r\n};\r\n\r\nexport default TVPresenter;","import TVContainer from \"./TVContainer\";\r\n\r\nexport default TVContainer;","import React from \"react\";\r\nimport TVPresenter from \"./TVPresenter\";\r\nimport { tvApi } from \"api\";\r\n\r\nexport default class extends React.Component {\r\n    state = {\r\n        topRated: null,\r\n        popular: null,\r\n        airingToday: null,\r\n        loading: true,\r\n        error: null\r\n    }\r\n\r\n    async componentDidMount () {\r\n        try {\r\n            const {data: {results: topRated}} = await tvApi.topRated();\r\n            const {data: {results: popular}} = await tvApi.popular();\r\n            const {data: {results: airingToday}} = await tvApi.airingToday();\r\n            this.setState({ topRated, popular, airingToday });\r\n        } catch {\r\n            this.setState({\r\n                error: \"Can't find TV infomation.\"\r\n            })\r\n        } finally {\r\n            this.setState({ loading: false });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { topRated, popular, airingToday, loading, error } = this.state;\r\n        console.log(this.state);\r\n        return (\r\n            <TVPresenter \r\n                topRated={topRated}\r\n                popular={popular}\r\n                airingToday={airingToday}\r\n                loading={loading}\r\n                error={error}\r\n            />\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Header = styled.header`\r\n    color: white;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 50px;\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 0px 10px;\r\n    background-color: rgba(20, 20, 20, 0.8);\r\n    box-shadow: 0px 1px 5px 2px rgba(0, 0, 0, 0.8);\r\n`;\r\n\r\nconst List = styled.ul`\r\n    display:flex;\r\n`;\r\n\r\nconst Item = styled.li`\r\n    width: 80px;\r\n    height: 50px;\r\n    text-align: center;\r\n    border-bottom: 3px solid \r\n        ${props => props.current ? \"#3498db\" : \"transparent\"};\r\n    transition: border-bottom 0.5s ease-in-out;\r\n`;\r\n\r\nconst SLink = styled(Link)`\r\n    height: 50px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n`;\r\n\r\nexport default withRouter(({ location: { pathname }}) => (\r\n    <Header>\r\n        <List>\r\n            <Item current={pathname === \"/\"}>\r\n                <SLink to=\"/\">Movies</SLink>\r\n            </Item>\r\n            <Item current={pathname === \"/tv\"}>\r\n                <SLink to=\"/tv\">TV</SLink>\r\n            </Item>\r\n            <Item current={pathname === \"/search\"}>\r\n                <SLink to=\"/search\">Search</SLink>\r\n            </Item>\r\n        </List>\r\n    </Header>\r\n));\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Loader from \"Components/Loader\";\r\nimport Section from \"Components/Section\";\r\nimport Message from \"Components/Message\";\r\nimport Poster from \"Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n    padding: 0 20px;\r\n`;\r\n\r\nconst Form = styled.form`\r\n    margin-bottom: 50px;\r\n    width: 100%;\r\n`;\r\n\r\nconst Input = styled.input`\r\n    all: unset;\r\n    font-size: 28px;\r\n    width: 100%;\r\n`;\r\n\r\nconst SearchPresenter = ({\r\n    movieResults,\r\n    tvResults,\r\n    loading,\r\n    error,\r\n    searchTerm,\r\n    handleSubmit,\r\n    updateTerm\r\n}) => (\r\n        <Container>\r\n            <Helmet><title>Search | Nflix</title></Helmet>\r\n            <Form onSubmit={handleSubmit}>\r\n                <Input\r\n                    placeholder=\"Search Movies or TV shows...\"\r\n                    value={searchTerm}\r\n                    onChange={updateTerm}\r\n                />\r\n            </Form>\r\n            {loading ? <Loader /> :\r\n                <>\r\n                    {movieResults && movieResults.length > 0 && (\r\n                        <Section title=\"Movie Results\">\r\n                            {movieResults.map(movie => (\r\n                                <Poster\r\n                                    key={movie.id}\r\n                                    id={movie.id}\r\n                                    imageUrl={movie.poster_path}\r\n                                    title={movie.original_title}\r\n                                    rating={movie.vote_average}\r\n                                    year={movie.release_date && movie.release_date.substring(0, 4)}\r\n                                    isMovie={true}\r\n                                />\r\n                            ))}\r\n                        </Section>\r\n                    )}\r\n                    {tvResults && tvResults.length > 0 && (\r\n                        <Section title=\"TV Show Results\">\r\n                            {tvResults.map(show => (\r\n                                <Poster\r\n                                    key={show.id}\r\n                                    id={show.id}\r\n                                    imageUrl={show.poster_path}\r\n                                    title={show.original_name}\r\n                                    rating={show.vote_average}\r\n                                    year={show.first_air_date.substring(0, 4)}\r\n                                />\r\n                            ))}\r\n                        </Section>\r\n                    )}\r\n                </>}\r\n            {error && <Message color=\"#e74c3c\" text={error} />}\r\n            {tvResults &&\r\n                movieResults &&\r\n                tvResults.length === 0 &&\r\n                movieResults.length === 0 && (\r\n                    <Message text={\"Nothing Found\"} color=\"#95a5a6\" />\r\n                )}\r\n        </Container>);\r\n\r\nSearchPresenter.propTypes = {\r\n    movieResults: PropTypes.array,\r\n    tvResults: PropTypes.array,\r\n    loading: PropTypes.bool.isRequired,\r\n    error: PropTypes.string,\r\n    searchTerm: PropTypes.string,\r\n    handleSubmit: PropTypes.func.isRequired,\r\n    updateTerm: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SearchPresenter;","import SearchContainer from \"./SearchContainer\";\r\n\r\nexport default SearchContainer;","import React from \"react\";\r\nimport SearchPresenter from \"./SearchPresenter\";\r\nimport { moviesApi } from \"api\";\r\nimport { tvApi } from \"api\";\r\n\r\nexport default class extends React.Component {\r\n    state = {\r\n        movieResults: null,\r\n        tvResults: null,\r\n        searchTerm: \"\",\r\n        loading: false,\r\n        error: null\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const { searchTerm } = this.state;\r\n        if(searchTerm !== \"\") {\r\n            this.searchByTerm();\r\n        }\r\n    }\r\n\r\n    updateTerm = (event) => {\r\n        const { target: { value } } = event;\r\n        this.setState({\r\n            searchTerm: value\r\n        });\r\n    }\r\n\r\n    searchByTerm = async() => {\r\n        const { searchTerm } = this.state;\r\n        this.setState({ loading: true});\r\n        try {\r\n            const { \r\n                data: { results: movieResults}\r\n            } = await moviesApi.search(searchTerm);\r\n            const { \r\n                data: { results: tvResults}\r\n            } = await tvApi.search(searchTerm);\r\n            this.setState({\r\n                movieResults,\r\n                tvResults\r\n            })\r\n\r\n        } catch {\r\n            this.setState({ error: \"Can't find results.\"});\r\n        } finally {\r\n            this.setState({ loading: false});\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { movieResults, tvResults, searchTerm, loading, error } = this.state;\r\n        console.log(this.state);\r\n        return (\r\n            <SearchPresenter \r\n                movieResults={movieResults}\r\n                tvResults={tvResults}\r\n                searchTerm={searchTerm}\r\n                loading={loading}\r\n                error={error}\r\n                handleSubmit={this.handleSubmit}\r\n                updateTerm={this.updateTerm}\r\n            />\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Loader from \"Components/Loader\";\r\n\r\nconst Container = styled.div`\r\n    height: calc(100vh - 50px);\r\n    width: 100%;\r\n    position: relative;\r\n    padding: 50px;\r\n`;\r\n\r\nconst Backdrop = styled.div`\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-image: url(${props => props.bgImage});\r\n    background-position: center center;\r\n    background-size: cover;\r\n    filter: blur(3px);\r\n    opacity: 0.5;\r\n    z-index: 0;\r\n`;\r\n\r\nconst Content = styled.div`\r\n    display: flex;\r\n    width: 100%;\r\n    position: relative;\r\n    z-index: 1;\r\n    height: 100%;\r\n`;\r\n\r\nconst Cover = styled.div`\r\n    width: 30%;\r\n    background-image: url(${props => props.bgImage});\r\n    background-position: center center;\r\n    background-size: cover;\r\n    height: 100%;\r\n    border-radius: 5px;\r\n`;\r\n\r\nconst Data = styled.div`\r\n    width: 70%;\r\n    margin-left: 10px;\r\n    border: 1px solid black;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n    font-size: 32px;\r\n    margin-bottom: 20px;\r\n`;\r\n\r\nconst ItemContainer = styled.div`\r\n    margin: 20px 0;\r\n`;\r\n\r\nconst Item = styled.span`\r\n\r\n`;\r\n\r\nconst Divider = styled.span`\r\n    margin: 0 10px;\r\n`;\r\n\r\nconst Imdb = styled.span`\r\n    display: inline-block;\r\n    width: 28px;\r\n    height: 13px;\r\n    background-image: url(${props => props.bgImage});\r\n    background-size: cover;\r\n`;\r\n\r\nconst Overview = styled.p`\r\n    font-size: 12px;\r\n    opacity: 0.7;\r\n    line-height: 1.5;\r\n    width: 50%;\r\n    margin-bottom: 20px;\r\n`;\r\n\r\nconst Company = styled.div`\r\n    position: absolute;\r\n    width: 40%;\r\n    height: 40%;\r\n    background-color: black;\r\n    opacity: 0.5;\r\n`;\r\n\r\nconst DetailPresenter = ({ result, loading, error }) => (\r\n    loading ? (\r\n        <>\r\n            <Helmet>\r\n                <title>Loading | Nflix</title>\r\n            </Helmet>\r\n        <Loader />\r\n        </>\r\n    ) : (\r\n            <Container>\r\n                <Helmet>\r\n                <title>\r\n                    {result.original_title ? result.original_title : result.original_name} | Nflix\r\n                </title>\r\n            </Helmet>\r\n                <Backdrop bgImage={`https://image.tmdb.org/t/p/original${result.backdrop_path}`} />\r\n                <Content>\r\n                    <Cover bgImage={result.poster_path ? `https://image.tmdb.org/t/p/original${result.poster_path}` : require(\"../../assets/noPosterSmall.png\")}/>\r\n                    <Data>\r\n                    <Title>\r\n                        {result.original_title ? result.original_title : result.original_name}\r\n                    </Title>\r\n                    <ItemContainer>\r\n                        <Item>{result.release_date \r\n                            ? result.release_date.substring(0, 4) \r\n                            : result.first_air_date.substring(0, 4)}\r\n                        </Item>\r\n                        <Divider>•</Divider>\r\n                        <Item>{result.runtime \r\n                            ? result.runtime \r\n                            : result.episode_run_time[0]} min\r\n                        </Item>\r\n                        <Divider>•</Divider>\r\n                        <Item>\r\n                            {result.genres && \r\n                            result.genres.map((genre, index) =>\r\n                                index === result.genres.length -1 \r\n                                ? genre.name\r\n                                : `${genre.name} / `\r\n                            )}\r\n                        </Item>\r\n                        <Divider>•</Divider>\r\n                        <Item>\r\n                            <Imdb bgImage={result.imdb_id ? `https://upload.wikimedia.org/wikipedia/commons/thumb/6/69/IMDB_Logo_2016.svg/375px-IMDB_Logo_2016.svg.png` : require(\"../../assets/imdbLogo.svg\")} onClick=\"http://parkDex.tistory.com\"/>\r\n                        </Item>\r\n                    </ItemContainer>\r\n                    <Overview>{result.overview}</Overview>\r\n                    <Company></Company>\r\n                </Data>\r\n                </Content>\r\n            </Container>\r\n        )\r\n);\r\n\r\nDetailPresenter.propTypes = {\r\n    result: PropTypes.object,\r\n    loading: PropTypes.bool.isRequired,\r\n    error: PropTypes.string\r\n};\r\n\r\nexport default DetailPresenter;","import DetailContainer from \"./DetailContainer\";\r\n\r\nexport default DetailContainer;","import React from \"react\";\r\nimport DetailPresenter from \"./DetailPresenter\";\r\nimport { moviesApi, tvApi } from \"../../api\";\r\n\r\nexport default class extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const { \r\n            location: { pathname } \r\n        } = props;\r\n        this.state = {\r\n            result: null,\r\n            error: null,\r\n            loading: true,\r\n            isMovie: pathname.includes(\"/movie/\")\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const {\r\n            match: {\r\n                params: { id }\r\n            },\r\n            history: { push },\r\n        } = this.props;\r\n        const { isMovie } = this.state;\r\n        const parseId = parseInt(id);\r\n        if (isNaN(parseId)) {\r\n            return push(\"/\");\r\n        }\r\n        let result;\r\n        try {\r\n            if(isMovie) {\r\n                ({data:  result} = await moviesApi.movieDetail(parseId));\r\n            } else {\r\n                ({data: result} = await tvApi.showDetail(parseId));\r\n            }\r\n        } catch {\r\n            this.setState({ error: \"Can't find anything.\" })\r\n        } finally {\r\n            this.setState({ loading: false, result });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { result, error, loading } = this.state;\r\n        console.log(result);\r\n        return (\r\n            <DetailPresenter\r\n                result={result}\r\n                error={error}\r\n                loading={loading}\r\n            />\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { HashRouter as Router, Route, Redirect, Switch } from \"react-router-dom\";\r\nimport Home from \"Routes/Home\";\r\nimport TV from \"Routes/TV\";\r\nimport Header from \"Components/Header\";\r\nimport Search from \"Routes/Search\";\r\nimport Detail from \"Routes/Detail\";\r\n\r\nexport default () => (\r\n    <Router>\r\n        <>\r\n            <Header />\r\n            <Switch>\r\n                <Route path=\"/\" exact component = {Home} />\r\n                <Route path=\"/tv\" exact component = {TV} />\r\n                <Route path=\"/search\" exact component = {Search} />\r\n                <Route path=\"/movie/:id\" component={Detail} />\r\n                <Route path=\"/show/:id\" component={Detail} />\r\n                <Redirect from=\"*\" to=\"/\" />\r\n            </Switch>\r\n        </>    \r\n    </Router>\r\n);","import { createGlobalStyle } from \"styled-components\";\r\nimport reset from \"styled-reset\";\r\n\r\nconst globalStyles = createGlobalStyle`\r\n    ${reset};\r\n    a {\r\n        text-decoration: none;\r\n        color: inherit;\r\n    }\r\n\r\n    * {\r\n        box-sizing:border-box;\r\n    }\r\n\r\n    body {\r\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\n        font-size: 14px;\r\n        background-color: rgba(20, 20, 20, 1);\r\n        color: white;\r\n        padding-top: 50px;\r\n    }\r\n`;\r\n\r\nexport default globalStyles;","import React, { Component } from \"react\";\nimport Router from \"Components/Router\";\nimport GlobalStyles from \"Components/GlobalStyles\";\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Router />\n        <GlobalStyles />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"Components/App\";\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}